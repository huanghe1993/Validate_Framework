-- /lua/dequeue.lua
-- 参考jesque的部分Lua脚本实现
-- local表示的是局部变量意思
-- ZREVRANGEBYSCORE 命令 - 返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
-- ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]
-- WITHSCORES：可选参数，是否返回分数值，指定则会返回得分值。
-- LIMIT：可选参数，offset和count原理和`MySQL`的`LIMIT offset,size`一致，如果不指定此参数则返回整个集合的数据。
local zset_key = KEYS[1]  --ORDER_QUEUE
local hash_key = KEYS[2]  -- ORDER_DETAIL_QUEUE
local max_score = ARGV[1] -- max：分数区间 - 最大分数。
local min_score = ARGV[2]  -- min：分数区间 - 最小分数。
local offset = ARGV[3]  -- 偏移量offset
local limit = ARGV[4]  -- 个数count
-- TYPE命令的返回结果是{'ok':'zset'}这样子,这里利用next做一轮迭代
-- lua中redis.call其实就是类似在命令行中执行redis的指令
--  Type 命令用于返回 key 所储存的值的类型。
local status, type = next(redis.call('TYPE', zset_key))
if status ~= nil and status == 'ok' then
    if type == 'zset' then
        -- 返回的值为table
        local list = redis.call('ZREVRANGEBYSCORE', zset_key, max_score, min_score, 'LIMIT', offset, limit)
        if list ~= nil and #list > 0 then
            -- unpack函数能把table转化为可变参数
            -- `ZREM`命令 - 用于移除有序集中的一个或多个成员，不存在的成员将被忽略。
            redis.call('ZREM', zset_key, unpack(list))
            -- Redis Hmget 命令用于返回哈希表中，一个或多个给定字段的值。
            local result = redis.call('HMGET', hash_key, unpack(list))
            -- `HDEL`命令 - 删除哈希表key中的一个或多个指定字段，不存在的字段将被忽略。
            redis.call('HDEL', hash_key, unpack(list))
            return result
        end
    end
end
return nil